{"version":3,"sources":["ng://testimonial/lib/testimonial.service.ts","ng://testimonial/lib/testimonial.component.ts","ng://testimonial/lib/Components/addedit/addedit.component.ts","ng://testimonial/lib/Modules/material-module.ts","ng://testimonial/lib/testimonial.module.ts"],"names":["TestimonialService","prototype","isTokenExpired","addData","endpoint","requestdata","httpOptions","headers","HttpHeaders","Content-Type","Authorization","this","accesstoken","_http","post","serverUrl","JSON","stringify","pipe","map","res","UpdateData","getData","deleteSingleData","deleteMultipleData","UpdateStatusForSingleData","UpdateStatusForMultipleData","CustomRequest","Injectable","args","providedIn","HttpClient","CookieService","_authHttp","cookieService","progress","uploaderror","get","fileservername","getdata_endpointUrl","TestimonialComponent","Object","defineProperty","receivedData","testimonialListConfig","apiUrl","apiBaseUrl","listEndPoint","datasource","tableName","listArray_skip","listArray_modify_header","name","email","testimonial","priority","status","admintablenameTableName","statusarr","val","updateurl","updateEndpoint","editUrl","jwtToken","deleteEndPoint","view","search_settings","textsearch","label","field","loader","ngOnInit","Component","selector","template","Input","AddeditComponent","generateForm","configData","action","buttonText","successMessage","setDefaultValue","defaultData","getConfig","testimonialForm","formBuilder","group","Validators","required","pattern","userId","userData","id","onSubmit","_this","controls","markAsTouched","invalid","value","parseInt","postData","source","data","assign","condition","testiService","subscribe","response","openDialog","setTimeout","dialogRef","close","router","navigate","callBack","alert","error","defaultValue","setValue","x","dialog","open","Modal","width","msg","afterClosed","result","inputBlur","markAsUntouched","FormBuilder","Router","MatDialog","Editor","ClassicEditor","editorConfig","placeholder","model","editorData","onNoClick","MatDialogRef","Inject","MAT_DIALOG_DATA","DemoMaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","TestimonialModule","declarations","imports","CKEditorModule","HttpClientModule","RouterModule","FormsModule","ReactiveFormsModule","CommonModule","BrowserModule","ListingModule","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpClientModule } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TestimonialService {\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken: any = this.cookieService.get('jwtToken');;\n  public fileservername: any = [];\n  public serverUrl: any = '';\n  public addendpointUrl: any;\n  public updateendpointUrl: any;\n  public deletesingle_endpointUrl: any;\n  public updatestatus_single_endpointUrl: any;\n  public deletemultiple_endpointUrl: any;\n  public updatestatus_multiple_endpointUrl: any;\n  public getdata_endpointUrl: any = 'datalist';\n\n  constructor(private _http: HttpClient, private _authHttp: HttpClient,private cookieService : CookieService) { }\n\n  isTokenExpired() {\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteSingleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint + 'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  CustomRequest(endpoint: any, requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\n\n\n@Component({\n  selector: 'lib-testimonial',\n  templateUrl: 'testimonial.component.html',\n  styleUrls: ['testimonial.component.css']\n})\nexport class TestimonialComponent implements OnInit {\n\n  // ==============================================declaration============================================\n  public testimonialListConfig: any;\n  public loader: boolean = true;\n  // =====================================================================================================\n\n\n\n\n  // ================================================Input For Lib Listing================================\n  @Input()\n  set config(receivedData: any) {\n   \n    this.testimonialListConfig = {\n      apiUrl: receivedData.apiBaseUrl,\n      listEndPoint: \"datalist\",\n      datasource: receivedData.datasource,\n      tableName: receivedData.tableName,\n      listArray_skip: [\"_id\", \"userId\", \"created_at\", \"id\", \"updated_at\"],\n      listArray_modify_header: { \"name\": \"Customer/User Name\", \"email\": \"Customer/User Email\", \"testimonial\": \"Testimonial\", \"priority\": \"Priority\", \"status\": \"Status\" },\n      admintablenameTableName: \"admin\",\n      statusarr: [{ val: 1, name: \"Active\" }, { val: 0, name: 'Inactive' }],\n      updateurl: receivedData.updateEndpoint,\n      editUrl: receivedData.editUrl,\n      jwtToken: receivedData.jwtToken,\n      deleteEndPoint: receivedData.deleteEndPoint,\n      view: receivedData.view,\n      search_settings:{\n        textsearch: [{ label: \"customer name...\", field: 'name' },{ label: \"customer email...\", field: 'email' },\n        { label: \"status...\", field: 'status' }],\n      }\n    }\n    this.loader = false;\n  }\n  // ====================================================================================================\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms'\nimport { TestimonialService } from '../../testimonial.service';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nexport interface DialogData {\n  msg: string;\n}\n\n\n@Component({\n  selector: 'lib-addedit',\n  templateUrl: './addedit.component.html',\n  styleUrls: ['./addedit.component.css']\n})\nexport class AddeditComponent implements OnInit {\n\n\n  /**ckeditor start here*/\n  public Editor = ClassicEditor;  //for ckeditor\n  editorConfig = {\n    placeholder: 'Write testimonial...',\n  };\n  public model = {\n    editorData: ''\n  };\n  /**ckeditor end here*/\n\n\n  //  ========================================Declaration Section======================================\n  buttonText = \"SUBMIT\";\n  testimonialForm: FormGroup;\n  public loader: boolean = false;\n  configData;\n  successMessage: string = \"Submitted Successfully\";\n  dialogRef: any;\n  // ==================================================================================================\n\n\n  constructor(private formBuilder: FormBuilder, private testiService: TestimonialService,\n    private router: Router, public dialog: MatDialog) { }\n\n  ngOnInit() {\n    this.loader = false;\n    this.generateForm();\n    // --------------------------------checking the cases------------------------ \n    switch (this.configData.action) {\n      case 'add':\n        /* Button text */\n        this.buttonText = \"SUBMIT\";\n        break;\n      case 'edit':\n        /* Button text */\n        this.buttonText = \"UPDATE\";\n        this.successMessage = \"One row updated\";\n        this.setDefaultValue(this.configData.defaultData);\n        break;\n    }\n    // --------------------------------------------------------------------------\n\n  }\n\n  @Input()\n  set config(getConfig: any) {\n    this.configData = getConfig;\n  }\n\n  // =====================================Form Validation/generation===================================\n  generateForm() {\n    this.testimonialForm = this.formBuilder.group({\n      name: ['', [Validators.required]],\n      email: ['', [Validators.required,Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/\n      )]],\n      testimonial: ['', [Validators.required]],\n      priority: ['', Validators.required],\n      status: [true,],\n      userId: [this.configData.userData.id, null]\n    })\n    \n  }\n  // =================================================================================================\n\n\n\n  // ==========================================SUBMIT=================================================\n\n\n  onSubmit() {\n     this.testimonialForm.controls['testimonial'].markAsTouched();\n    this.loader = true;\n    /* stop here if form is invalid */\n    if (this.testimonialForm.invalid) {\n      return;\n    } else {\n      if (this.testimonialForm.value.status) {\n        this.testimonialForm.value.status = parseInt(\"1\");\n      } else {\n        this.testimonialForm.value.status = parseInt(\"0\");;\n      }\n\n      /* start process to submited data */\n      let postData: any = {\n        source: this.configData.source,\n        data: Object.assign(this.testimonialForm.value, this.configData.condition)\n      };\n      this.testiService.addData(this.configData.endpoint, postData).subscribe((response: any) => {\n        if (response.status == \"success\") {\n          this.openDialog(this.successMessage);\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 2000);\n          this.router.navigate([this.configData.callBack]);\n        } else {\n          alert(\"Some error occurred. Please try angain.\");\n        }\n      }, (error) => {\n        alert(\"Some error occurred. Please try angain.\");\n      });\n    }\n  }\n  // =================================================================================================\n\n\n\n\n  // ================================================Default value======================================\n  setDefaultValue(defaultValue) {\n    this.testimonialForm.setValue({\n      name: defaultValue.name,\n      email: defaultValue.email,\n      testimonial: defaultValue.testimonial,\n      priority: defaultValue.priority,\n      status: defaultValue.status,\n      userId: null\n    });\n  }\n  // ==================================================================================================\n\n\n  // =========================================MODAL functions==========================================\n  openDialog(x: any): void {\n    this.dialogRef = this.dialog.open(Modal, {\n      width: '250px',\n      data: { msg: x }\n    });\n\n    this.dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n  // =====================================================================================================\n\n\n  inputBlur(val: any) {\n    this.testimonialForm.controls[val].markAsUntouched();\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// ============================================MODAL COMPONENT===========================================\n@Component({\n  selector: 'app-modal',\n  templateUrl: 'modal.html',\n})\nexport class Modal {\n\n  constructor(\n    public dialogRef: MatDialogRef<Modal>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n// ======================================================================================================\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n//import { MatFileUploadModule } from 'angular-material-fileupload';\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n    //MatFileUploadModule\n  ]\n})\nexport class DemoMaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at http://angular.io/license */","import { NgModule } from '@angular/core';\nimport { TestimonialComponent } from './testimonial.component';\nimport { AddeditComponent , Modal } from './Components/addedit/addedit.component';\nimport { DemoMaterialModule } from './Modules/material-module';\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ListingModule } from 'lib-listing';\n\n@NgModule({\n  declarations: [TestimonialComponent, AddeditComponent ,Modal],\n  imports: [\n    DemoMaterialModule,\n    CKEditorModule,\n    HttpClientModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    BrowserModule,\n    ListingModule\n  ],\n  exports: [TestimonialComponent,AddeditComponent] ,\n  entryComponents:[Modal ]\n})\nexport class TestimonialModule { }\n"]}