{"version":3,"sources":["ng://login/lib/login.service.ts","ng://login/lib/api.service.ts","ng://login/lib/login.component.ts","ng://login/lib/material-module.ts","ng://login/lib/sign-up/sign-up.component.ts","ng://login/lib/forget-password/forget-password.component.ts","ng://login/lib/reset-password/reset-password.component.ts","ng://login/lib/login.module.ts"],"names":["LoginService","Injectable","args","providedIn","ApiService","prototype","setServerUrl","value","this","subjectForServerUrl","next","clearServerUrl","getServerUrl","asObservable","setaddEndpoint","subjectForaddEndpointUrl","clearaddEndpoint","getaddEndpoint","setuploadEndpont","subjectForuploadEndpointUrl","clearuploadEndpoint","getuploadEndpoint","setupdateEndpoint","subjectForupdateEndpointUrl","clearupdateEndpoint","getupdateEndpoint","setdeletesingleEndpoint","subjectFordeletesingleEndpointUrl","cleardeletesingleEndpoint","getdeletesingleEndpoint","setupdatestatus_singleEndpoint","subjectForupdatestatusSingleEndpointUrl","clearupdatestatus_singleEndpoint","getupdatestatus_singleEndpoint","setgetdataEndpoint","subjectForGetdataEndpointUrl","cleargetdataEndpoint","getdataEndpoint","isTokenExpired","addData","requestdata","console","log","httpOptions","headers","HttpHeaders","Content-Type","Authorization","accesstoken","_http","post","serverUrl","addendpointUrl","JSON","stringify","pipe","map","res","uploadFile","access-token","uploadEndpointUrl","UpdateData","updateendpointUrl","getData","getdata_endpointUrl","addLogin","forgetPassword","deleteSingleData","deletesingle_endpointUrl","deleteMultipleData","UpdateStatusForSingleData","updatestatus_single_endpointUrl","UpdateStatusForMultipleData","CustomRequest","endpoint","HttpClient","CookieService","_authHttp","cookieService","_this","progress","uploaderror","get","fileservername","Subject","subscriptionServer","subscribe","message","result","subscriptionaddEndpoint","subscriptionuploadEndpoint","subscriptionupdateEndpoint","subscriptiondeletesingleEndpoint","subscriptionupdatestatusSingleEndpoint","subscriptionGetdataEndpoint","LoginComponent","Object","defineProperty","fromTitleVal","fromTitleValue","logoVal","logoValue","fullUrlVal","serverURL","endpointVal","endpointValue","v","cookieSetValue","routeingUrlval","signUpRouteingUrlValue","forgetRouteingUrlValue","routerStatusval","routerStatusValue","ngOnInit","apiService","setTimeout","loginFormSubmit","x","loginForm","controls","markAsTouched","valid","data","response","status","key","set","item","token","type","router","navigateByUrl","routerNav","formDirective","resetForm","msg","inputUntouched","val","markAsUntouched","forgetpassword","signup","Component","selector","template","FormBuilder","Router","ViewChild","FormGroupDirective","Input","fb","http","project_name","group","email","Validators","compose","required","pattern","password","DemoMaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","SignUpComponent","formTitleVal","formTitleValue","serverUrlVal","serverUrlValue","modaleLogoVal","link","typeval","typevalue","addEndpointVal","addEndpointValue","loginRouteingUrlValue","signUpFormSubmit","signUpForm","allData","source","dialog","open","successModalComponent","width","Url","login","MatDialog","firstname","lastname","onNoClick","dialogRef","close","MatDialogRef","Inject","MAT_DIALOG_DATA","ForgetPasswordComponent","domanUrlVal","domanUrlValue","addEndpointval","forgetPasswordSubmit","forgetPasswordForm","openSnackBar","domanUrl","snackBar","openFromComponent","snackBarComponent","duration","durationInSeconds","MatSnackBar","ResetPasswordComponent","fromTitleNameVal","fromTitleNameValue","machpassword","passwordkye","confirmpasswordkye","passwordInput","confirmpasswordInput","setErrors","notEquivalent","resetPasswordSubmit","resetPasswordForm","accesscode","ActivatedRoute","route","params","confirmPassword","validator","LoginModule","declarations","imports","FormsModule","ReactiveFormsModule","BrowserAnimationsModule","CommonModule","HttpClientModule","providers","bootstrap","schemas","CUSTOM_ELEMENTS_SCHEMA","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor() { }\n}\n","import { ElementRef, EventEmitter, Injectable, Input, ViewChild } from '@angular/core';\nimport { switchMap, map, takeWhile } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n// for setting observables to get serverurl and endpointurl from app\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport{CookieService} from 'ngx-cookie-service';\n\n\n@Injectable({   \n  providedIn: 'root'\n})\nexport class ApiService {\n\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken:any=this.cookieService.get('jwtToken');\n  // public accesstoken:any='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJleHAiOjE1NjgzNTgyMTAsImlhdCI6MTU2ODI3MTgxMH0.2ltvxVKwfX1uwMOwQ2Zzgp1K2jiaCDj051Wyho0Iw-Q';\n  fileservername: any = [];\n  serverUrl: any;\n  addendpointUrl: any;\n  uploadEndpointUrl:any; //souresh\n  updateendpointUrl: any;\n  deletesingle_endpointUrl: any;\n  updatestatus_single_endpointUrl: any;\n  deletemultiple_endpointUrl: any;\n  updatestatus_multiple_endpointUrl: any;\n  getdata_endpointUrl: any;\n  private subjectForServerUrl = new Subject<any>();\n  private subjectForaddEndpointUrl = new Subject<any>();\n  private subjectForuploadEndpointUrl = new Subject<any>();  //added by souresh\n  private subjectForupdateEndpointUrl = new Subject<any>();\n  private subjectFordeletesingleEndpointUrl = new Subject<any>();\n  private subjectForupdatestatusSingleEndpointUrl = new Subject<any>();\n  private subjectForGetdataEndpointUrl = new Subject<any>();\n  public subscriptionServer: Subscription;\n  public subscriptionaddEndpoint: Subscription;\n  public subscriptionuploadEndpoint: Subscription;   //added by souresh\n  public subscriptionupdateEndpoint: Subscription;\n  public subscriptiondeletesingleEndpoint: Subscription;\n  public subscriptionupdatestatusSingleEndpoint: Subscription;\n  public subscriptionGetdataEndpoint: Subscription;\n\n  constructor(private _http: HttpClient,\n    private _authHttp: HttpClient,private cookieService :CookieService) {\n    this.subscriptionServer = this.getServerUrl().subscribe(message => {\n     let result: any;\n      result = message;\n      if (result != null) {\n        this.serverUrl = result;\n      } else {\n        this.serverUrl = null;\n      }\n    });\n    this.subscriptionaddEndpoint = this.getaddEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.addendpointUrl = result;\n      } else {\n        this.addendpointUrl = null;\n      }\n    });\n    /*********added by souresh***********/\n    this.subscriptionuploadEndpoint=this.getuploadEndpoint().subscribe(message=>{\n      let result:any;\n      result=message;\n        if(result!=null){\n          this.uploadEndpointUrl = result;\n        } else{\n          this.uploadEndpointUrl = null;\n        }\n    })\n    /************souresh end here**************/\n    this.subscriptionupdateEndpoint = this.getupdateEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updateendpointUrl = result;\n      } else {\n        this.updateendpointUrl = null;\n      }\n    });\n    this.subscriptiondeletesingleEndpoint = this.getdeletesingleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.deletesingle_endpointUrl = result;\n      } else {\n        this.deletesingle_endpointUrl = null;\n      }\n    });\n    this.subscriptionupdatestatusSingleEndpoint = this.getupdatestatus_singleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updatestatus_single_endpointUrl = result;\n      } else {\n        this.updatestatus_single_endpointUrl = null;\n      }\n    });\n    this.subscriptionGetdataEndpoint = this.getdataEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.getdata_endpointUrl = result;\n      } else {\n        this.getdata_endpointUrl = null;\n      }\n    });\n\n    \n  }\n\n  setServerUrl(value: any) {\n    this.subjectForServerUrl.next(value);\n  }\n  public clearServerUrl() {\n    this.subjectForServerUrl.next(null);\n  }\n  public getServerUrl(): Observable<any> {\n    return this.subjectForServerUrl.asObservable();\n  }\n\n  setaddEndpoint(value: any) {\n    this.subjectForaddEndpointUrl.next(value);\n  }\n  public clearaddEndpoint() {\n    this.subjectForaddEndpointUrl.next(null);\n  }\n  public getaddEndpoint(): Observable<any> {\n    return this.subjectForaddEndpointUrl.asObservable();\n  }\n/*****added by souresh******/\n  setuploadEndpont(value:any){\n    this.subjectForuploadEndpointUrl.next(value);\n  }\n  public clearuploadEndpoint(){\n    this.subjectForuploadEndpointUrl.next(null);\n  }\n  public getuploadEndpoint(): Observable <any> {\n    return this.subjectForuploadEndpointUrl.asObservable();\n  }\n   /********souresh end here********/\n\n\n  setupdateEndpoint(value: any) {\n    this.subjectForupdateEndpointUrl.next(value);\n  }\n  public clearupdateEndpoint() {\n    this.subjectForupdateEndpointUrl.next(null);\n  }\n  public getupdateEndpoint(): Observable<any> {\n    return this.subjectForupdateEndpointUrl.asObservable();\n  }\n\n  setdeletesingleEndpoint(value: any) {\n    this.subjectFordeletesingleEndpointUrl.next(value);\n  }\n  public cleardeletesingleEndpoint() {\n    this.subjectFordeletesingleEndpointUrl.next(null);\n  }\n  public getdeletesingleEndpoint(): Observable<any> {\n    return this.subjectFordeletesingleEndpointUrl.asObservable();\n  }\n\n  setupdatestatus_singleEndpoint(value: any) {\n    this.subjectForupdatestatusSingleEndpointUrl.next(value);\n  }\n  public clearupdatestatus_singleEndpoint() {\n    this.subjectForupdatestatusSingleEndpointUrl.next(null);\n  }\n  public getupdatestatus_singleEndpoint(): Observable<any> {\n    return this.subjectForupdatestatusSingleEndpointUrl.asObservable();\n  }\n\n  setgetdataEndpoint(value: any) {\n    this.subjectForGetdataEndpointUrl.next(value);\n  }\n  public cleargetdataEndpoint() {\n    this.subjectForGetdataEndpointUrl.next(null);\n  }\n  public getdataEndpoint(): Observable<any> {\n    return this.subjectForGetdataEndpointUrl.asObservable();\n  }\n\n\n\n  isTokenExpired() {\n\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(requestdata: any) {\n    console.log('in adddata apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n\n    // console.log('httpoptions',httpOptions,this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*******added by souresh************/\n  uploadFile(requestdata:any){\n    const httpOptions={\n        headers: new HttpHeaders({\n          'Content-Type':'application/json',\n          'access-token':this.accesstoken          //hard code written access-token(temp)\n        })\n    };\n    var result=this._http.post(this.serverUrl + this.uploadEndpointUrl,JSON.stringify(requestdata),httpOptions).pipe(map(res=>res));\n    return result;\n  }\n  /*******souresh end here********/\n  UpdateData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updateendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.getdata_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n/*************** Added by himadri start here ***************/ \n  addLogin(requestdata: any) {\n    console.log('in addLogin apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n        // 'Authorization': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n\n    // console.log(this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*************** Added by himadri end here ***************/ \n\n/*************** Added by himadri start here ***************/ \nforgetPassword(requestdata: any) {\n  console.log('in forgetPassword apiservice');\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n      // 'Authorization': this.accesstoken          //hard code written access-token(temp)\n    })\n  };\n\n  // console.log(this.serverUrl,requestdata);\n  var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n  return result;\n}\n/*************** Added by himadri end here ***************/ \n\n\n  deleteSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  CustomRequest(requestdata: any, endpoint:any ) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl +endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators, MinLengthValidator, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { ApiService } from './api.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n\n\n@Component({\n  selector: 'lib-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  public message: any = '';\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public fromTitleValue: any = '';\n  public serverURL: any = '';\n  public signUpRouteingUrlValue: any = '';\n  public forgetRouteingUrlValue: any = '';\n  public routerStatusValue: any = '';\n  public endpointValue: any;\n  public logoValue: any = '';\n  public cookieSetValue: any = '';\n\n  @Input()         // Set the project name\n  set fromTitle(fromTitleVal: any) {\n    this.fromTitleValue = (fromTitleVal) || '<no name set>';\n    this.fromTitleValue = fromTitleVal;\n\n  }\n  @Input()      // set the from logo\n\nset logo(logoVal : any) {\n  this.logoValue = logoVal;\n}\n\n  @Input()        // setting the server url from project\n  set fullUrl(fullUrlVal: any) {\n    this.serverURL = (fullUrlVal) || '<no name set>';\n    this.serverURL = fullUrlVal;\n\n  }\n  @Input()\n\n  set endpoint(endpointVal: any) {\n    this.endpointValue = endpointVal;\n  }\n\n@Input()\n\npublic set cookieSet(v : any) {\n  this.cookieSetValue = v;\n  // console.log(this.cookieSetValue.cookie);\n  // for (const key in this.cookieSetValue.cookie) {\n            \n  //   console.log(this.cookieSetValue.cookie[key]);\n  // }\n\n}\n\n\n\n  @Input()          // setting the navigate By Sign Up Url from project\n  set signUpRouteingUrl(routeingUrlval: any) {\n    this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.signUpRouteingUrlValue = routeingUrlval;\n  }\n\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set forgetRouteingUrl(routeingUrlval: any) {\n    this.forgetRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.forgetRouteingUrlValue = routeingUrlval;\n  }\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set routerStatus(routerStatusval: any) {\n    this.routerStatusValue = (routerStatusval) || '<no name set>';\n    this.routerStatusValue = routerStatusval;\n    // console.log(this.routerStatusValue);\n    // console.log(this.routerStatusValue.data.length);\n  }\n\n\n\n\n  public loginForm: FormGroup;\n  public project_name: any = '';\n\n  constructor(public fb: FormBuilder, public http: HttpClient, public router: Router, public apiService: ApiService, public cookieService: CookieService) {\n    this.loginForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n      password: ['', Validators.required]\n    })\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       // Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverURL);       // set the server url \n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       // clear the endpoint \n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.endpointValue);       // set the endpoint\n    }, 50);\n    // console.log(this.addEndpointData.endpoint);\n\n  }\n\n/********* Login Form Submit start here*********/ \n  loginFormSubmit() {\n    let x: any;\n/****************** test*******************/ \n// for (const key in this.cookieSetValue.cookie) {\n//   console.log(this.cookieSetValue.cookie[key].type);\n//   if (result.token == this.cookieSetValue.cookie[key].type) {\n//     console.log('+++++++++++++++');\n//   }\n// }\n\n\n    // use for validation checking\n\n    for (x in this.loginForm.controls) {\n      this.loginForm.controls[x].markAsTouched();\n    }\n\n    if (this.loginForm.valid) {\n      let data: any = this.loginForm.value;\n      this.apiService.addLogin(data).subscribe((response) => {\n        // console.log(response);\n        let result: any = {};\n        result = response;\n      //   let cookiekeyarr:any = [];\n      //   let cookievaluearr:any = [];\n      //   for(let j in result.item){\n      //     // console.log(Object.values(result.item[j]));\n      //     // cookiekeyarr = Object.keys(result.item[j]);\n      //     // cookievaluearr = Object.values(result.item[j]);\n      //     cookievaluearr.push(Object.keys(result.item[j]), Object.values(result.item[j]));\n      //   }\n      //   // console.log('cookiekeyarr'+cookiekeyarr);\n      //   console.log(cookievaluearr);\n      // //   setTimeout(()=>{\n      //   // for (let key in cookiekeyarr){\n      //     for(let value in cookievaluearr[0]){\n      //       console.log('hi'+value);\n      //       // this.cookieService.set(cookiekeyarr[key],cookievaluearr[value]);\n      //     }\n      //   // }\n      // // },2000);\n      //   // setTimeout(()=>{\n      //   //   console.log(this.cookieService.getAll());\n      //   // },4000);\n        \n\n        if (result.status == \"success\") {\n          // for (const key in this.cookieSetValue.cookie) {\n          //   console.log(this.cookieSetValue.cookie[key].type);\n          //   if (result == this.cookieSetValue.cookie[key].type) {\n          //     console.log('+++++++++++++++');\n          //   }\n          // }\n          this.cookieService.set('user_details', JSON.stringify(result.item[0]));\n          this.cookieService.set('jwtToken', result.token);\n\n          setTimeout(() => {\n            // console.log(this.cookieService.getAll());\n          }, 1000);\n\n          // console.log('result')\n          // console.log(result.item[0].type)\n          for (const key in this.routerStatusValue.data) {\n            // console.log(this.routerStatusValue.data[key].type);\n\n            if (result.item[0].type === this.routerStatusValue.data[key].type) {\n              this.router.navigateByUrl('/' + this.routerStatusValue.data[key].routerNav)     // navigate to dashboard url \n            }\n          }\n\n\n          // this is use for reset the from\n          this.formDirective.resetForm();\n        } else {\n          // display error message on html\n          this.message = result.msg;\n        }\n      });\n    }\n\n  }\n\n\n  inputUntouched(val: any) {\n    this.loginForm.controls[val].markAsUntouched();\n  }\n\n  // This is use for navigate this component to forget component \n  forgetpassword() {\n    this.router.navigateByUrl('/' + this.forgetRouteingUrlValue);\n  }\n\n  // This is use for navigate this component to sign-Up component \n  signup() {\n    this.router.navigateByUrl('/' + this.signUpRouteingUrlValue);\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class DemoMaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n Use of this source code is governed by an MIT-style license that\n can be found in the LICENSE file at http://angular.io/license */\n","import { Component, OnInit, Input, Inject, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';\nimport { ApiService } from '../api.service';\n\n\n\nexport interface DialogData {\n  value: string;\n  Url: any;\n}\n\n@Component({\n  selector: 'lib-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})\nexport class SignUpComponent implements OnInit {\n  public value: any='';\n  public link: any='';\n  public Url: any='';\n  public message: any = '';\n\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public formTitleValue: any = '';\n  public serverUrlValue: any = '';\n  public forgetRouteingUrlValue: any = '';\n  public loginRouteingUrlValue: any = '';\n  public addEndpointValue: any = '';\n  public logoValue: any = '';\n  public typevalue: any = '';\n\n  @Input()         // Set the Form name\n  set formTitle(formTitleVal: any) {\n    this.formTitleValue = (formTitleVal) || '<no name set>';\n    this.formTitleValue = formTitleVal;\n    // console.log(this.formTitleValue);\n\n  }\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n    // console.log(this.serverUrlValue);\n\n  }\n@Input()      // set the from logo\n\nset logo(logoVal : any) {\n  this.logoValue = logoVal;\n}\n\n@Input()      // set the from logo\n\nset modaleLogo(modaleLogoVal : any) {\n  this.link = modaleLogoVal;\n}\n\n@Input()\nset userType(typeval: any) {\n  this.typevalue = typeval;\n}\n\n\n  @Input()        // set the endpoint And source\n  public set addEndpoint(addEndpointVal: any) {\n    this.addEndpointValue = addEndpointVal;\n    console.log(this.addEndpointValue)\n  }\n\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set forgetRouteingUrl(routeingUrlval: any) {\n    this.forgetRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.forgetRouteingUrlValue = routeingUrlval;\n    // console.log(this.forgetRouteingUrlValue);\n  }\n\n  @Input()          // setting the navigate By login Url from project\n  set loginRouteingUrl(routeingUrlval: any) {\n    this.loginRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.loginRouteingUrlValue = routeingUrlval;\n    // console.log(this.loginRouteingUrlValue);\n  }\n\n\n\n  public signUpForm: FormGroup;\n\n  constructor(public fb: FormBuilder, public http: HttpClient, public router: Router, public dialog: MatDialog, public apiService: ApiService) {\n    this.signUpForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      password: ['', Validators.required]\n    })\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       //  Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);        //  set the server url\n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       //  Clear the endpoint\n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);   //  set the endpoint\n    }, 50);\n  }\n\n\n/********* Sign Up Form Submit start here*********/ \n  signUpFormSubmit() {\n    // use for validation checking\n    for (let x in this.signUpForm.controls) {\n      this.signUpForm.controls[x].markAsTouched();\n    }\n    if (this.signUpForm.valid) {\n      // let link: any = this.fullUrlValue;\n      let allData: any = this.signUpForm.value;\n      allData.type = this.typevalue;\n      console.log(allData);\n\n      let data: any = {\n        'data': allData,\n        \"source\": this.addEndpointValue.source\n      };\n      console.log(data);\n      this.apiService.addData(data).subscribe((response) => {\n        let result: any = {};\n        result = response;\n        console.log(result);\n\n        if (result.status == \"success\") {\n          const dialogRef = this.dialog.open(successModalComponent, {\n            width: '250px',\n            data: {value: result.status, Url: this.link}\n          });\n          // this.router.navigateByUrl('/' + )     // navigate to dashboard url \n\n\n          // this is use for reset the from\n          this.formDirective.resetForm();\n        } else {\n          // display error message on html\n          this.message = result.msg;\n        }\n      })\n\n    }\n  }\n\n\n/********* Sign Up Form Submit end here*********/ \n\n  // This is use for navigate this component to forget component \n  forgetpassword() {\n    this.router.navigateByUrl('/' + this.forgetRouteingUrlValue);\n  }\n\n\n  // This is use for navigate this component to forget component \n  login() {\n    this.router.navigateByUrl('/' + this.loginRouteingUrlValue);\n  }\n\n  inputUntouched(val: any) {\n    this.signUpForm.controls[val].markAsUntouched();\n  }\n}\n\n\n@Component({\n  selector: 'successModal',\n  templateUrl: '../successModal.html',\n\n})\nexport class successModalComponent {\n\n  constructor(\n    public dialogRef: MatDialogRef<successModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n      console.log(data)\n     }\n\n    \n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n\n\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../api.service';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'lib-forget-password',\n  templateUrl: './forget-password.component.html',\n  styleUrls: ['./forget-password.component.css']\n})\nexport class ForgetPasswordComponent implements OnInit {\n  public message: any = '';\n\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public forgetPasswordForm: FormGroup;\n  public formTitleValue: any = '';          // This is From title\n  public serverUrlValue: any = '';          //  This is Server url\n  public signUpRouteingUrlValue: any = '';  // setting the navigate By Sign Up Url from project\n  private domanUrlValue: any = '';          // This is reset password url\n  public addEndpointValue: any = '';        // This is endpoint url\n  public logoValue: any = '';               // This is from logo url\n  public durationInSeconds = 5;             // This is SnackBar set time\n\n\n  @Input()         // Set the project email Doman URL\n  set domanUrl(domanUrlVal: any) {\n    this.domanUrlValue = (domanUrlVal) || '<no name set>';\n    this.domanUrlValue = domanUrlVal;\n    console.log(this.domanUrlValue);\n  }\n  @Input()         // Set the project name\n  set formTitle(formTitleVal: any) {\n    this.formTitleValue = (formTitleVal) || '<no name set>';\n    this.formTitleValue = formTitleVal;\n\n  }\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n\n  }\n\n  @Input()      // set the from logo\n\n  set logo(logoVal: any) {\n    this.logoValue = logoVal;\n  }\n\n  @Input()          // set the endpoint and source\n\n  set addEndpoint(addEndpointval: any) {\n    this.addEndpointValue = addEndpointval;\n  }\n\n\n  @Input()          // setting the navigate By Sign Up Url from project\n  set signUpRouteingUrl(routeingUrlval: any) {\n    this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.signUpRouteingUrlValue = routeingUrlval;\n  }\n\n  constructor(\n    public fb: FormBuilder,\n    public router: Router,\n    public apiService: ApiService,\n    private snackBar: MatSnackBar\n  ) {\n\n\n\n    this.forgetPasswordForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n\n    });\n\n\n\n\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       //  Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);        //  set the server url\n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       //  Clear the endpoint\n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);   //  set the endpoint\n    }, 50);\n  }\n\n  /********* Forget password  Form Submit start here*********/\n  forgetPasswordSubmit() {\n    let x: any;\n\n    //  This for-loop use for from blank or properly validated checking  \n    for (x in this.forgetPasswordForm.controls) {\n      this.forgetPasswordForm.controls[x].markAsTouched();\n    }\n    if (this.forgetPasswordForm.valid) {    //    validation checking\n\n      this.openSnackBar();              // open snack-bar function\n\n      let link: any = this.serverUrlValue;\n      let data: any = this.forgetPasswordForm.value;\n\n      data.domanUrl = this.domanUrlValue;\n\n      this.apiService.forgetPassword(data).subscribe((response) => {\n        // console.log(response);\n        let result: any = {};\n        result = response;\n\n\n        if (result.status == \"success\") {\n          this.openSnackBar();             // open snack-bar function\n          // this is use for reset the from\n          this.formDirective.resetForm();         // clear the from\n        } else {\n\n          // display error message on html\n          this.message = result.msg;      // show the error message\n\n        }\n      });\n    }\n  }\n\n  /********* Forget password  Form Submit end here*********/\n\n\n  /********* openSnackBar function open start here*********/\n\n\n  openSnackBar() {\n    this.snackBar.openFromComponent(snackBarComponent, {\n      duration: this.durationInSeconds * 1000,\n    });\n  }\n /********* openSnackBar function open end here*********/\n\n\n  // This is use for navigate this component to sign-Up component \n  signup() {\n    this.router.navigateByUrl('/' + this.signUpRouteingUrlValue);\n  }\n\n  inputUntouched(val: any) {\n    this.forgetPasswordForm.controls[val].markAsUntouched();\n  }\n\n}\n\n\n@Component({\n  selector: 'snack-bar-modale',\n  templateUrl: 'forget-passwordModale.html',\n  styles: [`\n    .example {\n      color: aliceblue;\n      background-color: yellowgreen;\n    }\n  `],\n})\nexport class snackBarComponent { }\n","import { Component, OnInit, Input, ViewChild, Inject } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../api.service';\n\n@Component({\n  selector: 'lib-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\n\n\n\nexport class ResetPasswordComponent implements OnInit {\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n  public resetPasswordForm: FormGroup;\n  public fromTitleNameValue: any = '';\n  public serverUrlValue: any = '';\n  public message: any = '';\n  public addEndpointValue: any = '';\n\n  public logoValue: any = '';\n  // public signUpRouteingUrlValue: any = '';\n\n\n  @Input()         // Set the Form name\n  set fromTitleName(fromTitleNameVal: any) {\n    this.fromTitleNameValue = (fromTitleNameVal) || '<no name set>';\n    this.fromTitleNameValue = fromTitleNameVal;\n    console.log(this.fromTitleNameValue);\n\n  }\n\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n    console.log(this.serverUrlValue);\n\n  }\n\n  @Input()        // set the endpoint and source\n\n  public set addEndpoint(addEndpointVal: any) {\n    this.addEndpointValue = addEndpointVal;\n  }\n\n  @Input()      // set the from logo\n\nset logo(logoVal : any) {\n  this.logoValue = logoVal;\n}\n\n\n  // @Input()          // setting the navigate By Sign Up Url from project\n  // set signUpRouteingUrl(routeingUrlval: any) {\n  //   this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n  //   this.signUpRouteingUrlValue = routeingUrlval;\n  //   console.log(this.signUpRouteingUrlValue);\n  // }\n  public accesscode: string;\n\n  constructor(public fb: FormBuilder, public http: HttpClient, public router: Router, public route: ActivatedRoute, public apiService: ApiService) {\n\n    this.route.params.subscribe(params => {\n\n      this.accesscode = params['token'];\n      console.log(this.accesscode);\n    })\n\n    this.resetPasswordForm = this.fb.group({\n      // password: ['',  Validators.compose([Validators.required, Validators.minLength(4)])],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n    }, {\n      validator: this.machpassword('password', 'confirmPassword')\n    })\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       // Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);       // set the server url \n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       // clear the endpoint \n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);       // set the endpoint\n    }, 50);\n    // console.log(this.addEndpointData.endpoint);\n\n  }\n  //  this function is use for mach password and confirm Password \n\n  machpassword(passwordkye: string, confirmpasswordkye: string) {\n    return (group: FormGroup) => {\n      let passwordInput = group.controls[passwordkye],\n        confirmpasswordInput = group.controls[confirmpasswordkye];\n      if (passwordInput.value !== confirmpasswordInput.value) {\n        return confirmpasswordInput.setErrors({ notEquivalent: true });\n      }\n      else {\n        return confirmpasswordInput.setErrors(null);\n      }\n    };\n  }\n\n\n\n/********* Reset Password Form Submit start here*********/ \n  resetPasswordSubmit() {\n    console.log(this.resetPasswordForm.value);\n    let x: any;\n    for (x in this.resetPasswordForm.controls) {\n      this.resetPasswordForm.controls[x].markAsTouched();\n    }\n    if (this.resetPasswordForm.valid) {\n      let data1: any = { \"password\": this.resetPasswordForm.value.password, \"accesscode\": this.accesscode }\n      let data: any = {\n        'data': data1,\n        \"source\": this.addEndpointValue.source\n      }\n\n\n      // data.accesscode = this.accesscode;\n\n      this.apiService.addData(data).subscribe((response) => {\n        let result: any = {};\n        result = response;\n        console.log(result);\n        if (result.status == \"success\") {\n          this.formDirective.resetForm();       // Use for reset the form\n        } else {\n          this.message = result.msg;\n        }\n\n      })\n    }\n  }\n\n\n/********* Reset Password Form Submit end here*********/ \n\n\n  inputUntouched(val: any) {\n    this.resetPasswordForm.controls[val].markAsUntouched();\n  }\n\n\n\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { LoginComponent } from './login.component';\nimport { DemoMaterialModule } from './material-module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SignUpComponent, successModalComponent } from './sign-up/sign-up.component';\nimport { ForgetPasswordComponent, snackBarComponent } from './forget-password/forget-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { ApiService } from './api.service';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    SignUpComponent,\n    ForgetPasswordComponent,\n    ResetPasswordComponent,\n    successModalComponent,\n    snackBarComponent,\n    // commonModalComponent\n\n  ],\n  imports: [\n    DemoMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    HttpClientModule\n  ],\n  exports: [LoginComponent, SignUpComponent, ForgetPasswordComponent, ResetPasswordComponent],\n  providers: [ApiService],\n  bootstrap: [],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  entryComponents: [ successModalComponent, snackBarComponent]\n})\nexport class LoginModule { }\n"]}